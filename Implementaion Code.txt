IMPLENTATION CODE:
#include <SoftwareSerial.h>
#include <LiquidCrystal.h>
LiquidCrystal lcd(9, 8, 7, 6, 5, 4);
#define RX 2
#define TX 3
int analog_MQ136 = A5; // Analog pin for MQ136 gas sensor
int analog_LM35 = A0; // Analog pin for LM35 temperature sensor
SoftwareSerial esp8266(RX, TX);
String AP = "POCO"; // AP NAME
String PASS = "password123"; // AP PASSWORD
String API = "AH25JPEVWHZYEZC2"; // Write API KEY
String HOST = "api.thingspeak.com";
String PORT = "80";
String field1 = "field1"; // Field name for gas sensor data
String field2 = "field2"; // Field name for gas quality rating
String field3 = "field3"; // Field name for temperature sensor data
String field4 = "field4"; // Field name for gas quality rating (rating out of 5)
int countTrueCommand;
int countTimeCommand;
boolean found = false;
float valSensor = 0.0;
int valSensor2 = 0;
double valSensor3 = 0.0;
55
double x,x1;
int y,y1;
float temp, temp1;
float temperature, temperature1;
// LCD Pins
void setup() {
Serial.begin(9600);
pinMode(analog_MQ136, INPUT);
pinMode(analog_LM35, INPUT); // LM35 temperature sensor pin as input
esp8266.begin(115200);
sendCommand("AT", 5, "OK");
sendCommand("AT+CWMODE=1", 5, "OK");
sendCommand("AT+CWJAP=\"" + AP + "\",\"" + PASS + "\"", 20, "OK");
// Initialize the LCD display
lcd.begin(16, 2);
lcd.setCursor(0, 0);
lcd.print("NH3 Conc:");
lcd.setCursor(0, 1);
lcd.print("MeatQ:");
}
void loop() {
// Read gas sensor data
x1 = analogRead(analog_MQ136);
lcd.setCursor(9, 0);
lcd.print(x1/2413.00);
lcd.setCursor(13, 0);
56
lcd.print("PPM");
// Determine gas quality rating
if (x1 < 390 && x1 >= 0) {
y1 = 5;
} else if (x1 < 400 && x1 >= 300) {
y1 = 4;
} else if (x1 < 500 && x1 >= 400) {
y1 = 3;
} else if (x1 < 600 && x1 >= 500) {
y1 = 2;
} else if (x1 < 700 && x1 >= 600) {
y1 = 1;
} else if (x1 > 700) {
y1 = 0;
}
lcd.setCursor(6, 1);
lcd.print(y1);
// Read LM35 temperature sensor data
float temp1 = analogRead(analog_LM35) * (5.0 / 1023.0); // Read LM35 sensor
voltage
int temperature1 = temp1 * 10; // Convert to Celsius
lcd.setCursor(8, 1);
lcd.print("Temp=");
lcd.setCursor(13, 1);
if(temperature1 >= 27)
{
temperature1 = 27;
}
57
else if(temperature1 <= 22)
{
temperature1 = 22;
}
lcd.print(temperature1);
// Send gas sensor data to server
valSensor = getSensorData(); //PPM
String getData = "GET /update?api_key=" + API + "&" + field1 + "=" +
String(valSensor);
sendCommand("AT+CIPMUX=1", 5, "OK");
sendCommand("AT+CIPSTART=0,\"TCP\",\"" + HOST + "\"," + PORT, 15,
"OK");
sendCommand("AT+CIPSEND=0," + String(getData.length() + 4), 4, ">");
esp8266.println(getData);
delay(100);
countTrueCommand++;
sendCommand("AT+CIPCLOSE=0", 5, "OK");
// Send gas quality rating to server
valSensor2 = getSensorData2(); //RATING out of 5
String getData2 = "GET /update?api_key=" + API + "&" + field2 + "=" +
String(valSensor2);
sendCommand("AT+CIPMUX=1", 5, "OK");
sendCommand("AT+CIPSTART=0,\"TCP\",\"" + HOST + "\"," + PORT, 15,
"OK");
sendCommand("AT+CIPSEND=0," + String(getData2.length() + 4), 4, ">");
esp8266.println(getData2);
delay(100);
countTrueCommand++;
58
sendCommand("AT+CIPCLOSE=0", 5, "OK");
// Send LM35 temperature data to server
valSensor3 = getSensorData3(); // Read temperature from LM35
String getData3 = "GET /update?api_key=" + API + "&" + field3 + "=" +
String(valSensor3);
sendCommand("AT+CIPMUX=1", 5, "OK");
sendCommand("AT+CIPSTART=0,\"TCP\",\"" + HOST + "\"," + PORT, 15, "OK");
sendCommand("AT+CIPSEND=0," + String(getData3.length() + 4), 4, ">");
esp8266.println(getData3);
delay(100);
countTrueCommand++;
sendCommand("AT+CIPCLOSE=0", 5, "OK");
// Calculate rating for field 4
int rating = map(valSensor2, 0, 5, 0, 100); // Map gas quality rating to 0-100 scale
String getData4 = "GET /update?api_key=" + API + "&" + field4 + "=" +
String(rating); // Prepare data for field 4
sendCommand("AT+CIPMUX=1", 5, "OK");
sendCommand("AT+CIPSTART=0,\"TCP\",\"" + HOST + "\"," + PORT, 15, "OK");
sendCommand("AT+CIPSEND=0," + String(getData4.length() + 4), 4, ">");
esp8266.println(getData4);
delay(100);
countTrueCommand++;
sendCommand("
AT+CIPCLOSE=0", 5, "OK");
59
// Update LCD display
delay(1000);
}
// Function to get gas sensor data
double getSensorData() {
x = analogRead(analog_MQ136);
lcd.setCursor(9, 0);
lcd.print(x/2413.00);
lcd.setCursor(13, 0);
lcd.print("PPM");
return (x / 2143.0000);
}
// Function to get gas quality rating
int getSensorData2() {
if (x < 390 && x >= 0) {
y = 5;
} else if (x < 400 && x >= 300) {
y = 4;
} else if (x < 500 && x >= 400) {
y = 3;
} else if (x < 600 && x >= 500) {
y = 2;
} else if (x < 700 && x >= 600) {
y = 1;
} else if (x > 700) {
y = 0;
}
60
lcd.setCursor(14, 1);
lcd.print(y);
return y;
}
// Function to get LM35 temperature sensor data
double getSensorData3() {
float temp = analogRead(analog_LM35) * (5.0 / 1023.0); // Read LM35 sensor
voltage
temperature = temp * 100; // Convert to Celsius
return temperature;
}
// Function to send AT commands to ESP8266 module
void sendCommand(String command, int maxTime, char readReplay[]) {
Serial.print(countTrueCommand);
Serial.print(". at command => ");
Serial.print(command);
Serial.print(" ");
while (countTimeCommand < (maxTime * 1)) {
esp8266.println(command); //at+cipsend
if (esp8266.find(readReplay)) //ok
{
found = true;
break;
}
countTimeCommand++;
}
if (found == true) {
61
Serial.println("OYI");
countTrueCommand++;
countTimeCommand = 0;
}
if (found == false) {
Serial.println("Fail");
countTrueCommand = 0;
countTimeCommand = 0;
}
found = false;
}
